language: generic
env:
  global:
    - COMMIT_AUTHOR_EMAIL="philipp.sommer@hzg.de"
    - BUILD_STR_END=cf
    - secure: "HJbiFhfVTzA/85tJXTa3BYYpSxisYbXFUJ3eVZY3TUcqHnHnUxLqbOFtcaf1LnnTgRhki6pzVr3OclXdkc24pbaNBpQi+DslwJ7cAcKTG96ianQC3JBNfUbEJN4wIFutaVm1Yp5u8mSZgGGzETGFQX9GiP2APJ5hmi9xkGCPRm9Uznua3tX723b5YBtwGz/MhkI8CPdW78N5rdv0MgZ8b7TmnxmvonZA6JX1CDoqYlkzbiJcjzIkfYlavHKmJrzLgOyc72i4vxpZw6iKDyQq45WaoKd/qSccR+zz3EcwKeXr/CUqhnNw45JB0Evln/2OLI6CxIikGv8ZxAfrq3n3An9rBDrjkT6IL99/Pgw6Z653har+yutPCbQ+oiUZ0YwYpIVa7G48ExuRDdVqWcL9zd5tNCVH+8tWVhkrBqYEW6QiN5yuL0HSE26KeHb6KCQ5yyBBCN2VGYm8xR3g6ZYtHTkEDg5mVCkj0u4q0AeUtcXQzKHRrhiHY2CyR2kjaszMwG0m7uFobYt2O/O1T+6xN8MjmAR6R7oWX7D1Ii5u1A9o0KVMJtEW+m7oIK7KkcDWD5bbH4aSrzsJVVLHUGjdOX9OHWQ/uwkVCcp6KKg7G6Btyj7xB5CJT5l79j0RdjadswaaQIa1kICmCPMVHWaIXoaSAjt8+0F5Kg7jouGmuH0="
    - secure: "FleGX8EV2CSutmoAV1k8YfkOH3hXOMXI1lL375n7KBvoG8DsESThj5HXMDODPJIRqcB4Lt9cjhwRDvZAnPBwlxr9JjoKNFubj9JLUHjGZITMl1PEWuLW8BaXthU6iA8p9htZLlWYCOooC7rLW6+RiDgfXA+i0yohLSJoncWYdhbTtMr86p1CINz1uhR59doJSdx3/nXazMeS+45FZMccGi/6XGE5nC3jRujmTXG5T0q63Lc1qSSrnzLl/le7+RU+C2g06Bdrz5FZ+6OMM9ycp9VM2sk9uzMbyJoqwsJKCj2cEfQSBUcIIl0tItVIJQuXkLYtaNk7UDWSBbmdWDkPq8+pf4wkr3Pi3EzT4NRKj6I486P1IrMyslj7/+u7x0U3mmlR1MPCYh/WUH0QlEz/+qg3IHN105jeJo0YuX1m6fgDoPm2TburZDHZAg6OLXzF6aULPRWrrvl5iKGSzXcQEXg9FnvyNlpn/ZZzUyh1oLeuxwRiM4kzzMPrKCAY+rs3FJ6BjQxuhWQDXt8jHqCqiJ6oVZxSvHzeRTMk7lGg83s/4LWHYUcKE+LT47pbpV9RDELk6/eGw4CZ89S8y94NJlWsTSmEl2yvUFa08aCGze/ERmkwxcbgICFaApwDIDDuvMIsU8A/h2CUK+wWD5Ppw5/k1d1i/PbSJgbVKHJyswA="
matrix:
    include:
        # linux environments
        - env:
            - PYTHON_VERSION=3.8
            - MPL_VERSION=3.1
            - QT_VERSION=5
            - DEPLOY_CONDA=true
          os: linux
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.1
            - QT_VERSION=5
            - DEPLOY_CONDA=true
          os: linux
        - env:
            - PYTHON_VERSION=3.7
            - DEPLOY_CONDA=true
            - BUILD_STR_END=
          os: linux
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.0
            - QT_VERSION=5
          os: linux
        # osx environments
        - env:
            - PYTHON_VERSION=3.8
            - MPL_VERSION=3.1
            - DEPLOY_CONDA=true
          os: osx
        - env:
            - PYTHON_VERSION=3.7
            - DEPLOY_CONDA=true
            - BUILD_STR_END=
          os: osx
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.1
            - DEPLOY_CONDA=true
          os: osx

services:
    - xvfb

git:
    submodules: false
    depth: false

before_install:
    - if [[ "$TRAVIS_EVENT_TYPE" == "cron" ]]; then export DEPLOY_CONDA=false; fi
    # define functions to unset and reset encrypted variables
    - function unset_secure {
          CONDA_TOKEN_SAVE=$CONDA_REPO_TOKEN;
          unset CONDA_REPO_TOKEN;
          GH_REPO_TOKEN_SAVE=$GH_REPO_TOKEN;
          unset GH_REPO_TOKEN;
          }
    - function reset_secure {
          export CONDA_REPO_TOKEN=$CONDA_TOKEN_SAVE;
          export GH_REPO_TOKEN=$GH_REPO_TOKEN_SAVE;
          }
    - unset_secure
    # increase open files limit
    - ulimit -a
    - ulimit -Sn 10000
    - ulimit -a
      # select the os name for the conda installer
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          OS_NAME=MacOSX;
      else
          OS_NAME=Linux;
      fi
    # Install Miniconda.
    - |
      echo ""
      echo "Installing a fresh version of Miniconda."
      MINICONDA_URL="https://repo.continuum.io/miniconda"
      MINICONDA_FILE="Miniconda3-latest-${OS_NAME}-x86_64.sh"
      curl -L -O "${MINICONDA_URL}/${MINICONDA_FILE}"
      bash $MINICONDA_FILE -bp $HOME/miniconda3
    - source $HOME/miniconda3/bin/activate root
    - hash -r
    - reset_secure

before_script:
    - if [[ $TRAVIS_OS_NAME == "linux" ]]; then
          export "DISPLAY=:99.0";
          sh -e /etc/init.d/xvfb start;
          sleep 3;
      fi

install:
    # unset the global CONDA_REPO_TOKEN variable because it is not needed
    # during the tests. This decreases the vulnerability
    - unset_secure
    - 'echo "backend : qt5agg" > matplotlibrc'
    - 'export MATPLOTLIBRC=`pwd`/matplotlibrc'
    - |
        echo ""
        echo "Configuring conda."
        conda config --set always_yes yes --set changeps1 no
        if [[ ${BUILD_STR_END} == "cf" ]]; then
            conda config --add channels conda-forge
        else
            conda config --add channels chilipp
        fi
        conda config --add channels psyplot
        conda update -q conda
        conda install conda-build anaconda-client conda-verify
    - if [[ $TRAVIS_TAG == "" ]]; then
        export GIT_BRANCH=$TRAVIS_BRANCH;
        conda config --add channels psyplot/label/${TRAVIS_BRANCH};
      fi
    - python ci/setup_append.py ci/conda-recipe matplotlib=${MPL_VERSION} pyqt=${QT_VERSION}
    - if [[ $USE_PIP == true ]]; then
        python -m pip install . -r ci/requirements.txt;
      fi
    - conda info -a
    - conda list
    - export PSYPLOT_REFERENCES=`pwd`/`python tests/get_ref_dir.py -mpl ${MPL_VERSION} -py ${PYTHON_VERSION}`
    - export REFBRANCH=`python tests/get_ref_dir.py -b -mpl ${MPL_VERSION} -py ${PYTHON_VERSION}`
    - git submodule update --init ${PSYPLOT_REFERENCES}
    - reset_secure

script:
    - unset_secure
    # install conda
    - if [[ $USE_PIP == true ]]; then
          pytest -v --cov=psy_simple && codecov;
      else
          conda build ci/conda-recipe --python $PYTHON_VERSION;
      fi
    - if [[ ${BUILD_STR_END} == "cf" ]]; then python ci/check_ref_deploy.py; fi
    # export the pw to make it available for the deploy
    - reset_secure
    # deploy here (don't use travis deploy because it requires homebrew)
    - if [[ $DEPLOY_CONDA == "true" && $TRAVIS_PULL_REQUEST == "false" && $TRAVIS_REPO_SLUG == "psyplot/psy-simple" ]]; then
          ci/deploy_anaconda.py;
      fi

deploy:
  - provider: script
    script: ci/update_reference_submodule.py
    skip_cleanup: true
    on:
      all_branches: true
      condition: "-e deploy_references"
  - provider: script
    script: ci/update_submodules.py
    skip_cleanup: true
    on:
      condition: "-e deploy_references"
      all_branches: true
